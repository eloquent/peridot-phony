#!/usr/bin/env php
<?php

use Eloquent\Asplode\Asplode;
use Icecave\SemVer\Comparator;
use Icecave\SemVer\Version;

require __DIR__ . '/../vendor/autoload.php';

Asplode::install();

$isTravis = (bool) getenv('TRAVIS');
$tag = getenv('TRAVIS_TAG');
$branch = getenv('TRAVIS_BRANCH');
$token = getenv('GITHUB_TOKEN');

if ($tag) {
    $currentVersion = $tag;
} else {
    $currentVersion = $branch;
}

if (!$tag && !$branch) {
    throw new RuntimeException('No tag or branch information.');
}

echo "Publishing Phony for Peridot website...\n";

$workPath = __DIR__ . '/../build/gh-pages';
$webPath = __DIR__ . '/../web';

if (file_exists($workPath)) {
    chdir($workPath);
    passthru('git reset --hard origin/gh-pages');
    passthru('git checkout .');
    passthru('git clean -fdx');
    passthru('git pull --rebase');
} else {
    if ($token) {
        $repo = sprintf(
            'https://%s:x-oauth-basic@github.com/eloquent/peridot-phony.git',
            rawurlencode($token)
        );
    } else {
        $repo = 'https://github.com/eloquent/peridot-phony.git';
    }

    exec(
        'git clone -b gh-pages --single-branch --depth 1 ' .
            escapeshellarg($repo) . ' ' .
            escapeshellarg($workPath) . ' 2>&1',
        $output,
        $exitCode
    );

    $output = implode("\n", $output) . "\n";

    if ($token) {
        $output = str_replace($token, 'xxx', $output);
    }

    echo $output;

    if (0 !== $exitCode) {
        throw new RuntimeException(
            'Failed to clone Phony for Peridot website.'
        );
    }

    chdir($workPath);
}

echo "Detecting versions...\n";

$versions = array();

if (Version::tryParse($currentVersion, $version)) {
    $versions[] = $version;
}

foreach (scandir($workPath) as $entry) {
    if ('.' === substr($entry, 0, 1)) {
        continue;
    }

    $entryPath = $workPath . '/' . $entry;

    if (is_dir($entryPath) && Version::tryParse($entry, $version)) {
        $versions[] = $version;
    }
}

if ($versions) {
    $comparator = new Comparator();

    usort(
        $versions,
        function ($left, $right) use ($comparator) {
            return $comparator->compare($right, $left);
        }
    );

    $latestVersion = $versions[0]->string();
} else {
    echo 'wat';
    $latestVersion = 'master';
}

$versionStrings = array();

foreach ($versions as $version) {
    $versionString = $version->string();
    $versionStrings[] = $versionString;
}

$versionStrings[] = 'master';

foreach ($versionStrings as $version) {
    echo "    - $version\n";
}

echo "Updating latest symlink...\n";

$latestPath = $workPath . '/latest';

if (is_link($latestPath)) {
    unlink($latestPath);
}

symlink($latestVersion, $latestPath);

echo "Updating version data...\n";

file_put_contents(
    $workPath . '/data/versions.json',
    json_encode($versionStrings, JSON_PRETTY_PRINT) . "\n"
);

echo "Updating assets...\n";

passthru('rm -rf ' . escapeshellarg($workPath . '/css'));
passthru(
    'cp -r ' . escapeshellarg($webPath . '/css') . ' ' .
    escapeshellarg($workPath . '/css')
);
passthru('rm -rf ' . escapeshellarg($workPath . '/js'));
passthru(
    'cp -r ' . escapeshellarg($webPath . '/js') . ' ' .
    escapeshellarg($workPath . '/js')
);

echo "Updating documentation for $currentVersion...\n";

$currentVersionPath = $workPath . '/' . $currentVersion;
passthru('rm -rf ' . escapeshellarg($currentVersionPath));
passthru('mkdir -p ' . escapeshellarg($currentVersionPath));
passthru(
    'cp -r ' . escapeshellarg($webPath . '/img') . ' ' .
    escapeshellarg($currentVersionPath . '/img')
);

$html = file_get_contents($webPath . '/index.html');
$html = strtr(
    $html,
    [
        'data-version="master"' => sprintf(
            'data-version="%s"',
            htmlspecialchars($currentVersion)
        ),
    ]
);

file_put_contents($currentVersionPath . '/index.html', $html);

echo "Updating headers and footers...\n";

$header = file_get_contents(__DIR__ . '/../assets/web/header.tpl.html') . "\n";
$footer = "\n\n" .file_get_contents(__DIR__ . '/../assets/web/footer.tpl.html');

foreach ($versionStrings as $version) {
    if ($version === $currentVersion) {
        continue;
    }

    echo "    - $version\n";

    $versionPath = $workPath . '/' . $version;

    $html = file_get_contents($versionPath . '/index.html');
    $html = preg_replace('/^(.*)(?=<!-- START content -->)/s', $header, $html);
    $html = preg_replace('/(?<=<!-- END content -->)(.*)$/s', $footer, $html);
    $html = strtr(
        $html,
        [
            'data-version="master"' => sprintf(
                'data-version="%s"',
                htmlspecialchars($version)
            ),
        ]
    );

    file_put_contents($versionPath . '/index.html', $html);
}

exec('git diff --quiet', $output, $exitCode);

if (0 === $exitCode) {
    echo "No website changes detected.\n";

    exit(0);
}

echo "Committing...\n";

$commitMessage = sprintf(
    'Automated documentation update for %s.',
    var_export($currentVersion, true)
);

passthru('git add -A');
passthru('git config user.email ' . escapeshellarg('e@lqnt.co'));
passthru('git config user.name ' . escapeshellarg('Eloquent Software'));
passthru('git commit -m ' . escapeshellarg($commitMessage));

if (!$isTravis) {
    echo "Travis not detected.\n";

    exit(1);
}

if (!$token) {
    echo "GitHub token not detected.\n";

    exit(1);
}

echo "Pushing...\n";

exec('git push origin gh-pages 2>&1', $output, $exitCode);

$output = implode("\n", $output) . "\n";

if ($token) {
    $output = str_replace($token, 'xxx', $output);
}

echo $output;

if (0 !== $exitCode) {
    throw new RuntimeException('Failed to push Phony for Peridot website.');
}

echo "Done.\n";
